/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge15;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private BinarySearchTree tree;

    @BeforeEach
    public void setUp() {
        tree = new BinarySearchTree();
    }
    @Test
    public void testInstantiateEmptyTree() {
        assertTrue(tree.isEmpty());
    }

    @Test
    public void testInstantiateTreeWithSingleNode() {
        tree.add(5);
        assertFalse(tree.isEmpty());
    }

    @Test
    public void testAddLeftAndRightChild() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        assertTrue(tree.contains(3));
        assertTrue(tree.contains(8));
    }

    @Test
    public void testPreOrderTraversal() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        List<Integer> expected = Arrays.asList(5, 3, 8);
        assertEquals(expected, tree.preOrder());
    }

    @Test
    public void testInOrderTraversal() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        List<Integer> expected = Arrays.asList(3, 5, 8);
        assertEquals(expected, tree.inOrder());
    }

    @Test
    public void testPostOrderTraversal() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        List<Integer> expected = Arrays.asList(3, 8, 5);
        assertEquals(expected, tree.postOrder());
    }

    @Test
    public void testContainsForExistingNode() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        assertTrue(tree.contains(3));
    }

    @Test
    public void testContainsForNonExistingNode() {
        tree.add(5);
        tree.add(3);
        tree.add(8);

        assertFalse(tree.contains(6));
    }

}
