/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge30;


import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import java.util.HashSet;


import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private static HashTable<String, Integer> hashtable;

    @BeforeAll
    public static void setUp() {
        hashtable = new HashTable<>();
    }

    @Test
    public void testSetAndGet() {
        hashtable.set("key1", 42);
        int value = hashtable.get("key1");
        assertEquals(42, value);
    }

    @Test
    public void testSetWithCollision() {
        hashtable.set("key1", 42);
        hashtable.set("key2", 84);
        int value1 = hashtable.get("key1");
        int value2 = hashtable.get("key2");
        assertEquals(42, value1);
        assertEquals(84, value2);
    }

    @Test
    public void testGetNonExistentKey() {
        assertNull(hashtable.get("nonexistent"));
    }

    @Test
    public void testKeys() {
        hashtable.set("key1", 42);
        hashtable.set("key2", 84);
        hashtable.set("key3", 126);
        Iterable<String> keys = hashtable.keys();
        HashSet<String> uniqueKeys = new HashSet<>();
        for (String key : keys) {
            uniqueKeys.add(key);
        }
        assertTrue(uniqueKeys.contains("key1"));
        assertTrue(uniqueKeys.contains("key2"));
        assertTrue(uniqueKeys.contains("key3"));
    }

    @Test
    public void testHashInRange() {
        int hashedIndex = hashtable.hash("key1");
        assertTrue(hashedIndex >= 0 && hashedIndex < hashtable.capacity);
    }
}
